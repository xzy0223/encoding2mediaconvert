# Mapping rules for Encoding.com to AWS MediaConvert conversion
rules:
  # Container format mapping
  - source:
      path: "output"
      type: "string"
      default: "mp4"
    target:
      path: "Settings.OutputGroups[0].OutputGroupSettings.Type"
      transform: "output_group_type"

  # Container format specific settings
  - source:
      path: "output"
      type: "string"
      condition:
        operator: "eq"
        value: "mp4"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].ContainerSettings.Container"
      value: "MP4"

  # HLS specific settings
  - source:
      path: "output"
      type: "string"
      condition:
        operator: "eq"
        value: "advanced_hls"
    target:
      path: "Settings.OutputGroups[0].OutputGroupSettings.Type"
      value: "HLS_GROUP_SETTINGS"

  # DASH specific settings
  - source:
      path: "output"
      type: "string"
      condition:
        operator: "eq"
        value: "advanced_dash"
    target:
      path: "Settings.OutputGroups[0].OutputGroupSettings.Type"
      value: "DASH_ISO_GROUP_SETTINGS"

  # Segment duration for streaming formats
  - source:
      path: "segment_duration"
      type: "number"
    target:
      path: "Settings.OutputGroups[0].OutputGroupSettings.HlsGroupSettings.SegmentLength"
      condition:
        source_path: "output"
        operator: "eq"
        value: "advanced_hls"

  - source:
      path: "segment_duration"
      type: "number"
    target:
      path: "Settings.OutputGroups[0].OutputGroupSettings.DashIsoGroupSettings.SegmentLength"
      condition:
        source_path: "output"
        operator: "eq"
        value: "advanced_dash"

  # Single output video settings (for MP4)
  - source:
      path: "video_codec"
      type: "string"
      default: "libx264"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.Codec"
      transform: "video_codec_format"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  - source:
      path: "framerate"
      type: "number"
      default: 30
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.FramerateNumerator"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  - source:
      path: "framerate"
      type: "number"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.FramerateDenominator"
      value: "1"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  - source:
      path: "framerate"
      type: "number"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.FramerateControl"
      value: "SPECIFIED"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Resolution
  - source:
      path: "size"
      type: "string"
      regex: "(\\d+)x(\\d+)"
      default: "1280x720"
    target:
      - path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.Width"
        value: "$1"
        condition:
          source_path: "output"
          operator: "eq"
          value: "mp4"
      - path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.Height"
        value: "$2"
        condition:
          source_path: "output"
          operator: "eq"
          value: "mp4"
        
  # Video bitrate
  - source:
      path: "bitrate"
      type: "string"
      regex: "(\\d+)k"
      default: "2000k"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.Bitrate"
      value: "$1000"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # CBR/VBR mode
  - source:
      path: "cbr"
      type: "string"
      default: "no"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.RateControlMode"
      transform: "rate_control_mode"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Audio codec
  - source:
      path: "audio_codec"
      type: "string"
      default: "libfaac"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].AudioDescriptions[0].CodecSettings.Codec"
      transform: "audio_codec_format"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Audio bitrate
  - source:
      path: "audio_bitrate"
      type: "string"
      regex: "(\\d+)k"
      default: "128k"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].AudioDescriptions[0].CodecSettings.AacSettings.Bitrate"
      value: "$1000"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Audio sample rate
  - source:
      path: "audio_sample_rate"
      type: "number"
      default: 48000
    target:
      path: "Settings.OutputGroups[0].Outputs[0].AudioDescriptions[0].CodecSettings.AacSettings.SampleRate"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Audio normalization
  - source:
      path: "loudnorm"
      type: "string"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].AudioDescriptions[0].AudioNormalizationSettings.TargetLkfs"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"
      
  # Audio normalization peak
  - source:
      path: "loudnorm_peak"
      type: "string"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].AudioDescriptions[0].AudioNormalizationSettings.TruePeakLimiterThreshold"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"

  # Profile setting
  - source:
      path: "profile"
      type: "string"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.Profile"
      transform: "profile_format"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"

  # Multi-stream handling (for HLS/DASH)
  - source:
      path: "stream"
      type: "array"
    target:
      path: "Settings.OutputGroups[0].Outputs"
      transform: "process_streams"
      condition:
        source_path: "output"
        operator: "in"
        value: ["advanced_hls", "advanced_dash"]

  # 处理H.264 level参数
  - source:
      path: "video_codec_parameters/level"
      type: "number"
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.CodecSettings.H264Settings.Level"
      transform: "h264_level_format"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"

  # 处理色彩空间参数
  - source:
      path: "video_codec_parameters/color_primaries"
      type: "number"
      condition:
        operator: "eq"
        value: 1
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.ColorSpace"
      value: "REC_709"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"

  # 处理色彩范围参数
  - source:
      path: "video_codec_parameters/color_range"
      type: "number"
      condition:
        operator: "eq"
        value: 1
    target:
      path: "Settings.OutputGroups[0].Outputs[0].VideoDescription.ColorMetadata"
      value: "INSERT"
      condition:
        source_path: "output"
        operator: "eq"
        value: "mp4"

# Transformation functions
transformers:
  output_group_type:
    "mp4": "FILE_GROUP_SETTINGS"
    "advanced_hls": "HLS_GROUP_SETTINGS"
    "advanced_dash": "DASH_ISO_GROUP_SETTINGS"
    
  container_format:
    "mp4": "MP4"
    "mov": "MOV"
    "mxf": "MXF"
    "advanced_hls": "M3U8"
    "advanced_dash": "MPD"
    
  video_codec_format:
    "libx264": "H_264"
    "libx265": "H_265"
    "vp9": "VP9"
    
  audio_codec_format:
    "libfaac": "AAC"
    "dolby_aac": "AAC"
    "libmp3lame": "MP3"
    
  rate_control_mode:
    "yes": "CBR"
    "no": "QVBR"
    
  profile_format:
    "main": "MAIN"
    "high": "HIGH"
    "baseline": "BASELINE"
    
  h264_level_format:
    "10": "LEVEL_1"
    "11": "LEVEL_1_1"
    "12": "LEVEL_1_2"
    "13": "LEVEL_1_3"
    "20": "LEVEL_2"
    "21": "LEVEL_2_1"
    "22": "LEVEL_2_2"
    "30": "LEVEL_3"
    "31": "LEVEL_3_1"
    "32": "LEVEL_3_2"
    "40": "LEVEL_4"
    "41": "LEVEL_4_1"
    "42": "LEVEL_4_2"
    "50": "LEVEL_5"
    "51": "LEVEL_5_1"
    "52": "LEVEL_5_2"
